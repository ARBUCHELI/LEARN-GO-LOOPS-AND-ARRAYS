# LOOPS
-------

* Introduction to Looping
-------------------------
A loop is a way of repeating a block of code until a certain condition is met.

Loops build on top of the logic found in conditional if statements. When an if statement’s condition is true, its code block is executed once. In a for loop, the code block is repeated 
until the condition is no longer true.

Haven’t found everything you need in a grocery store yet? Then while that condition is true, the following steps need to be completed over and over again:

	. Read an item off of the shopping list.

	. Find that item in the store.

	. Put that item in the cart.

A robot could follow this loop to shop in a store for us! And just as repetitive tasks like these are common in real life, they are also common in programming.

Keep going to see how programmers repeat tasks using loops!

* Instructions
--------------
With loops, any repetitive task can be solved with a small amount of code. The attached GIF repeats a loop of turning a rectangle over and over again.

While this loop is endless, in the next exercise we will learn to create loops that execute a set number of times!

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* The Classic For Loop
----------------------
An if statement allows us to check a specific condition once. But what if that condition needs to be checked a certain number of times?

Definite loops can be used to repeat code a fixed number of times.

While an if statement only has a conditional expression (like number < 5), a definite loop has two additional components:

	. An initial statement, which defines the starting value for a loop variable.
	Ex: number := 0

	. A post statement, which defines what happens at the end of each loop iteration.
	Ex: number++

So while an if statement that prints one number less than 5 may look like this:

number := 3
if number < 5 {
  fmt.Println(number)
}
// Output: 3

A for loop that prints the numbers 0, 1, 2, 3, and 4 would look like this:

for number := 0; number < 5; number++ {
  fmt.Print(number, " ")
}
// Output: 0 1 2 3 4

While the if statement prints a number once, the for loop uses a similar syntax to print a number five times.

Let’s dive deeper into each component of that definite loop:

	. The initial statement, number := 0, creates a new variable to be used within the for loop code block.

	. The conditional expression, number < 5, will stop the loop when number reaches the target value of 5.

	. The post statement, number++, increases the value of the number variable by 1 each time the code block completes.

In this example, the amount of times that the number needed to be printed was known beforehand. But what do we do when we don’t know how many times a loop needs to run?

Find out more in the next exercise!

* Instructions
--------------
Checkpoint 1 Passed
1.
You are hosting a party and trying to count the number of guests. The last host left a loop to do this, but there is a bug in the code!

Change the initial statement of the loop, count := 8, so that the count begins at 1 instead of 8.


Hint
An initial statement can be changed from starting at 10:

for tally := 10; tally <= 50; tally++ {
  fmt.Println(tally)
}

To starting at 20, like so:

for tally := 20; tally <= 50; tally++ {
  fmt.Println(tally)
}

Checkpoint 2 Passed
2.
Disaster has struck! Eight people cannot make it to the party!

Change the conditional expression of the loop, count <= 20, so that the loop only counts up to 12.


Hint
A conditional expression can be changed ending at 50:

for tally := 0; tally <= 50; tally++ {
  fmt.Println(tally)
}

To ending at 100, like so:

for tally := 0; tally <= 100; tally++ {
  fmt.Println(tally)
}

Checkpoint 3 Passed
3.
With the amount of guests set, count off the odd numbered guests to make teams for a game!

Change the post statement of the loop, count++, so that count = count + 2 after the completion of each loop.


Hint
A post statement can be changed from incrementing tally using tally++:

for tally := 0; tally <= 50; tally++ {
  fmt.Println(tally)
}

To incrementing tally using tally = tally + 10, like so:

for tally := 0; tally <= 100; tally = tally + 10 {
  fmt.Println(tally)
}

party.go
--------
package main

import (
    "fmt"
)

func main() {

  for count := 1; count <= 12; count+= 2 {
    fmt.Println(count)
  }
 
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* For as a While Loop
---------------------
Sometimes it is impossible to know how many iterations of a loop are needed ahead of time.

For example, imagine if a club is throwing an event to promote new member sign-ups. The club has to process each new sign-up as long as more people keep coming!

In situations like these, indefinite loops can be used. Indefinite loops are loops that repeat while a condition remains true. So with the club example, an indefinite loop could run as 
long as there are new sign-ups to process.

Some other examples could be:

	. A car that accelerates while the gas is being pressed.
	. A stove that heats up while the knob is turned on.
	. A music player that plays songs while the pause button is not pressed.

All of these examples show some sort of process happening while a condition is met. Most programming languages use the while keyword to declare indefinite loops.

However, the behavior of definite and indefinite loops is very similar. For this reason, Go simplifies the language by using only the for keyword for both types of loops.

The syntax between the two types of loops is pretty similar, but with some crucial differences.

First, any variables to be used inside the loop need to be initialized ahead of time. Second, any update to these variables has to be manually included within the code block. So the 
previous printing numbers example using a definite loop:

for number := 0; number < 5; number++ {
  fmt.Println(number)
}

Can be rewritten like so as an indefinite loop:

number := 0 // Initialize a variable to be used inside the loop
for number < 5 {
  fmt.Println(number)
  number++ // Update the variable being used
}

Both of these code snippets produce the same output, they are just different ways of implementing the same logic.

What would happen if the previous code didn’t contain number++? Find out in the next exercise!

* Instructions
--------------
Checkpoint 1 Passed
1.
The sphinx guards a great treasure, but needs help repeatedly asking for guesses!

Begin by compiling and running the starting code contained in sphinx.go.

Click the “Check Work” button after you’ve run the command.


Hint
A file named count.go can be compiled and executed using the command:

go run count.go

Checkpoint 2 Passed
2.
Now help the sphinx ask for guesses repeatedly.

While guess != 56, use an indefinite loop to call the ask function over and over again.

Make sure to save the output of the ask function to the guess variable.


Hint
The code for taking guesses needs to be wrapped in an indefinite loop like so:

for CONDITION {
  guess = ask()
}

Have the indefinite loop continue as long as guess != 56.

sphinx.go
---------
package main

import (
  "fmt"
)

func ask() (int) {
  var input int
  fmt.Print("I am thinking of a number between 1-100: ")
  // Get the input from the user
  fmt.Scan(&input)
  return input
}

func main() {
  var guess int

  // WRITE THE INDEFINITE LOOP CONTAINING THE ASK FUNCTION BELOW
  guess = ask()

  for guess != 56 {
    guess = ask()
  }

  if guess == 56 {
    fmt.Println("You are correct! You may go through to the treasure!")
  }
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Infinite Loops
----------------
Sometimes an indefinite loop does not end, creating an infinite loop.

An infinite loop is a loop where the condition can never be reached, causing the loop to run forever.

Sometimes this can be dangerous as it can make a program appear to be frozen to the user. But for something like a web server that constantly needs to be running, these infinite loops are 
critical.

While an infinite loop can be any loop that does not end, a purposefully created infinite loop is written like this:

for {
  // Loop body logic
  // This repeats forever
}
// This is never reached

There is also a way to stop these loops at a certain point in code, which will be discussed in the next exercise!

* Instructions
--------------
Checkpoint 1 Passed
1.
You run a 24/7 gym and want to count all the groups of members that walk in.

Begin by compiling and running the starting code contained in gym.go.

After running the command, click “Check Work” to continue.


Hint
A file named tally.go can be compiled and executed using the command:

go run tally.go

Checkpoint 2 Passed
2.
Time to count all of the members.

Write an infinite loop that repeatedly calls the count function to get the total number of guests!

Try running the code again and see what happens!

When ready, click the “Check Work” button to test if the loop is set up properly.


Hint
Recall from the exercise that an infinite loop can be built like so:

var counter int
for {
  counter += 1
}

gym.go
------
package main

import (
  "fmt"
)

var number int

func count() {
  var input int
  fmt.Print("Number of guests: ")
  fmt.Scan(&input)
  number = number + input
  fmt.Println("Total guests:", number)
}

func main() {

  // WRITE THE INFINITE LOOP CONTAINING THE COUNT FUNCTION BELOW
  for {
    count()
  }
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------




































