# ARRAYS AND SLICES
-------------------

* Introduction to Arrays
------------------------
Imagine we are creating an online gaming platform, and need to keep track of players’ scores. For each player, we’d need to store their score at a consistent index for that player. This 
is a situation in which arrays would come in handy!

An array is a collection of data elements of the same type, where we can access each element by an index. We can think of an array as a row of mailboxes, with each index representing a 
house number.

[0][1][2][3][4][5]

Arrays are one of the most common forms of variables used in programs. We use arrays for tasks such as:

	. Storing many pieces of input

	. Storing related collections of values

	. Performing mathematical operations on lists of numbers

Across the world, arrays are being used in billions of running programs!

Throughout this course, we will introduce and practice using arrays in our programs. Over the next several exercises we will introduce:

	. Creating arrays

	.Accessing array values

	. Using the length of an array

To begin using arrays in our programs, we will first have to create them. We will get started creating arrays in the next exercise.

* Instructions
--------------
Check out and run the code in the workspace and continue on when ready!

arrays.go
---------
package main

import "fmt"

func main() {
  // Create an array for our 4 player scores.
  var playerScores [4]int
  // Set the first player's score to 43
  playerScores[0] = 43
  // Set the second player's score to 7
  playerScores[1] = 7
  // Set the third player's score to 32
  playerScores[2] = 32
  // Set the fourth player's score to 65
  playerScores[3] = 65
  // Print the scores of all the players!
  fmt.Println(playerScores)
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Array Creation
----------------
To use arrays in our programs, we must first declare and name them. In Go, there are a variety of ways in which we can declare an array. In the next few exercises, we will explore methods 
of array creation.

When we declare a variable in Go, the compiler:

	. Finds space in memory for that variable

	. Associates the variable with a name

Using arrays makes the compiler’s job a little more complicated. When we declare a single variable, the compiler needs to find enough space for one of that data type. When we declare an 
array, the compiler is going to have to find enough space for several of a data type.

To make this process simple, declaring an array in Go requires that we provide the number of elements. Once declared, we cannot change this number without declaring a new array. The 
compiler finds enough space for the array’s type, multiplied by the number of elements.

We can create arrays with or without an initial set of elements. We use an array without initial elements when the rest of our program will create the array’s content. To create an array 
without an initial set of elements we use the following syntax:

var playerScores [4]int
fmt.Println(playerScores)
// [0 0 0 0]

This syntax creates an empty array of integer values with space for 4 elements. We could create an array like this and later fill it with values from user input.

While empty arrays are great for storing data we can’t predict, sometimes we already know what we want in our array! In the next exercise, we’ll introduce a way to create an array filled 
with particular values.

First, let’s practice creating an empty array.

* Instructions
--------------
Checkpoint 1 Passed
1.
Begin by creating an empty array of strings, playerNames with space for 5 elements


Hint
We can create an array of a particular size with syntax like:

var arrayName [numOfElements]type

Checkpoint 2 Passed
2.
Next, print the content of the array you just created. What do you expect to see?


Hint
We can print a variable with fmt.Println

fmt.Println(variable)

arrays.go
---------
package main

import "fmt"

func main() {
  // Create the array here
  var playerNames [5]string
  fmt.Println(playerNames)
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Array Creation with Elements
------------------------------
While empty arrays are useful, so are arrays already populated with elements! Sometimes we already know which values we are going to put in our array.

Imagine we are doing some math homework, and using the same triangles over an over again. We could declare two arrays with the values of the side lengths and angles for that triangle.

triangleSides := [3]int{15, 26, 30}
triangleAngles := [...]int{30, 60, 90}

Notice how the syntax between these two lines is different. When creating an array with values, we can have the compiler determine the length automatically using ... ellipsis syntax.

So now we have some values, but how can we use these to do our math homework? In the next exercise, we will learn how to access the values stored in our arrays.

Before that, let’s create some arrays populated with values.

* Instructions
--------------
Checkpoint 1 Passed
1.
Imagine we needed to store the correct result for a 5 number lottery. The correct numbers for that lottery are:

5, 48, 32, 1, 6

Create an array with those numbers as its values.


Hint
We can create an array with a set number of values with syntax like:

triangleSides := [3]int{15, 26, 30}

Checkpoint 2 Passed
2.
Print the array containing the lottery numbers into the output terminal.


Hint
We can print a variable with fmt.Println

fmt.Println(variable)

arrays.go
---------
package main

import "fmt"

func main() {
  // create array below
  lotteryNumbers := [5]int{5, 48, 32, 1, 6}
  fmt.Println(lotteryNumbers)
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Access Array Values with Indices
----------------------------------
We’ve learned how to create arrays that contain values. But how can we access the values stored in arrays?

While having a list of numbers in a program might look nice, we need to access values to do useful computation. We need to use or modify individual values to perform activities such as:

	. finding the sum of all the elements (or some other value)
	. updating a value for a particular element
	. searching for a particular value within the array

Without being able to access or change values, an array is only a pretty list! To access elements of an array, we use something called indexing. As mentioned before, each element of an 
array has an index.

One thing that often confuses new programmers is the index at the start of the array. Go uses 0 as the first index of the array, meaning that it stores the first element at index 0. It 
might be tempting to try and access the first element with index 1, but this will access the second element.

Let’s take a look at accessing an array of student names, defined here:

students = [3]string{"Jill", "Fred", "Sasha"}
// Access the first element of the array
fmt.Println(students[0])
// Output: Jill
// Access the third element of the array
fmt.Println(students[2])
// Output: Sasha
// Store the second element into a variable
secondStudent := students[1]
// Print it
fmt.Println(secondStudent)
// Output: Fred

Accessing array elements is helpful, but we often need to change values stored in our array. Modifying array values will be the subject of our next exercise.

First, let’s practice accessing elements for use in our computations.

* Instructions
--------------
Checkpoint 1 Passed
1.
We are finally able to start completing our math homework!

Use array indexing to print out the largest angle in the array.


Hint
We can access an element at a particular index with syntax by using:

  arrayName[0]

Checkpoint 2 Passed
2.
Use array indexing to store the sum of all the triangle angles into a sum variable.


Hint
Add the values at each index together, and store them into a variable:

variable := a + b + c

Checkpoint 3 Passed
3.
Print out the sum!


Hint
We can print a variable with fmt.Println()

fmt.Println(variable)

arrays.go
---------
package main

import "fmt"

func main() {
  triangleAngles := [3]int{30, 60, 90}
  fmt.Println(triangleAngles[2])
  sum := triangleAngles[0] + triangleAngles[1] + triangleAngles[2]
  fmt.Println(sum)
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Modifying Array Values
------------------------
Being able to retrieve the values stored in our array is super helpful, but what if we need to change them? Changing an array value is something that happens all the time in professional 
programs. Consider:

	. Counting or calculating a value over time

	. Recieving new information about a piece of data

	. Having data change positions within the array

All of these scenarios require that we change the value initially stored in our array. The syntax for doing so is quite simple

	array[index] = value

Where index is any valid index in the array, value is any expression we want. Let’s say we had an array:

	myArray := [4]int{10, 24, 5, 47}

Let’s say that we decide we want the third element to now be 33. We could change the array at that index with the following line:

	myArray[2] = 33

The content of the array would now be {10, 24, 33, 47}

We can use this syntax to modify any valid index, between 0 and the length of the array.

In the next exercise, we will learn about slices, which allow us to add additional length to our lists, but for now, let’s practice modifying elements!

* Instructions
--------------
Checkpoint 1 Passed
1.
We tried to create an array with a list of our dog’s names, but we must have turned off autocorrect!

Our second dog’s name is Fido, not Fedo.

Can you use the array element manipulation syntax we just learned to fix it?


Hint
Set the element at index 1 (the second element) to "Fido".

Remember the array manipulation syntax:

array[index] = value

Checkpoint 2 Passed
2.
We can’t believe we messed up the other dog name too!

Our third dog is Jeff not Jegf.

Can you fix that using the array manipulation syntax?


Hint
Set the element at index 2 to "Jeff".

Remember the array manipulation syntax:

array[index] = value

Checkpoint 3 Passed
3.
Let’s check our work.

Please print the array of dog names.


Hint
We printed the array earlier in the program. The syntax is like:

fmt.Println(variableName)

arrays.go
---------
package main

import "fmt"

func main() {
    // I have 3 dogs, Frida, Fido, and Jeff
    myDogs := [3]string{"Frida", "Fedo", "Jegf"}
    fmt.Println(myDogs)
    myDogs[1] = "Fido"
    myDogs[2] = "Jeff"
    fmt.Println(myDogs)
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Introduction to Slices
------------------------
So far we’ve been using arrays, which have a fixed size. If we were to want to store a different number of elements in our array, we’d have to make a whole new one. However, Go provides 
us with a useful alternative.

Slices are a data collection type similar to arrays, but they have the ability to change their size. We will cover how to do that in later exercises, but first we will learn how to make a 
slice in the first place.

There are multiple ways to create a slice. We can create a slice from an array, or by itself. Let’s start with creating a slice by itself.

	// Each of the following creates an empty slice
	var numberSlice []int
	stringSlice := []string{}

	// The following creates a slice with elements
	names := []string{"Kathryn", "Martin", "Sasha", "Steven"}

While this last slice currently has four elements, we would be able to continue to add elements using functions covered in later exercises.

We can also take an array, and create a slice based on that array. Modifying the slice will still update the original array.

	array := [5]int{2, 5, 7, 1, 3}
	// This is a slice of the whole array
	sliceVersion := array[:]
	fmt.Println(sliceVersion)
	// [2 5 7 1 3]
	// This is a slice containing the elements at indices 2, 3, and 4
	partialSlice := array[2:5]
	fmt.Println(partialSlice)
	// [7 1 3]

One of the best parts about slices is that their elements are accessed and modified the same way as arrays! Since we already know how to do this with arrays, we also know slices

	var names = []string{"Kathryn", "Martin", "Sasha", "Steven"}
	fmt.Println(names[1])
	// Martin
	names[3] = "Bishop"
	fmt.Println(names[3])
	// Bishop

Let’s practice using some slices in our programs.

* Instructions
--------------
Checkpoint 1 Passed
1.
We are probably going to need to hire more tutors this year. Too bad we used an array to store their names.

Can you make a slice using the myTutors array?


Hint
The syntax for creating a slice based on an array is:

sliceVersion := array[:]

Checkpoint 2 Passed
2.
We should also track the subjects that the tutors have experience in. The subjects are as follows:

Go
Java
Python
Please create a new slice containing these elements.


Hint
The syntax for creating a new slice with elements is:

numberSlice := []int{1, 2, 3}

Checkpoint 3 Passed
3.
Let’s check our work.

Print the slice containing the tutors’ names as well as the slice containing the subjects.


Hint
We can print a slice using syntax like so:

fmt.Println(variable)

arrays.go
---------
package main

import "fmt"

func main() {
    myTutors := [4]string{"Kirsty", "Mishell", "Jose", "Neil"}
    fmt.Println(myTutors)
    myTutorsVersion := myTutors[:]
    subjects :=[]string{"Go", "Java", "Python"}
    fmt.Println(myTutorsVersion)
    fmt.Println(subjects)
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------


































































































































